#validationtab.py### Obsolete 1/24/2020# Incorporated inside resultstab.py########################################################################   Creates tab screen for validation of tourney scores#   Will self-register in notebook found in screenDict of cfg####################################################################### System importsimport tkinter as tkfrom tkinter import fontfrom tkinter import ttkfrom tkinter import messagebox as mbxfrom tkinter import filedialog as fdgfrom sqlobject import *import sys as sysimport os as os# Personal importsimport seniorsconfig as cfgfrom memscorecard import MemScoreCardfrom memgame import MemGamefrom memplayer import MemPlayerclass ValidationTab (ttk.Frame):	# screen class is always a frame	#************************************************************	#	#   sets up tab for validation all score cards keyed in using scorestab	def __init__ (self, parent=None):		super().__init__(parent)		self.grid()		if __name__ == '__main__':			# skip notebook registration step			print('Standalone validaton test')		else:			# build out tab and register with notebook			self.config(padding='10')			parent.add(self, text='Validate')			cfg.screenDict['vtab'] = self		############################################################		#		#   Entry conditions in cfg:		#   Nothing has yet been committed to the database; all in memory		#   playersInTourney has list of players by k:v playerId:name		#   tourneyScoreCards has dict of validated MemScoreCard for each player		#       k:v playerId:memScoreCard containing dict of 9 MemGames		#           k:v gameNumber:MemGame object		#   s_p_ids has list of playerIds in this tourney		#   s_p_names has list of names for players in tourney		#   s_p_id_names has dict k:v playerId:names		#   tourneyRecordId is id for the selected tourney		#		#   Logic note:		#   For the seniors, there is no strict rotation so the game		#   numbers will not usually match the opponents. Thus validation		#   has to search though all opponents games for a seat number		#   that matches the player score card being validated.		#   Further, it is quite common for seniors to play each other		#   more that once.		#   Currently we limit the multiple matches to 3 per player -		#   but more can be accommodated readily.		#   As player scorecard games are validated against the opponent		#   a record is kept so we can tell when all is done.		#		#   Change to show one Player game and one or more opponent games		#   that can be selected as the one to match against - or to correct		#   Note that if one of the games is the correct one, then the other		#   ones will have thrown errors, which should be ignored.		#		#   If there is more than one game to be compared, then we should not		#   show the error messages for any of the opponent games, but give		#   user the choice of which one to accept.		#		#   If one of multiple games matches, show user a 'This game matches'		#   choice - no point in allowing any corretions - the move onto the		#   next game in sequence for the player.		#		#   When all games for a given player's score cards have been corected,		#   Move on to the next player.		#		#   Show 'All Cards Validated' message when we have gone through and		#   accepted and/or corrected all games for all score cards.		#		#   Double check that all validated entries for all cards are set to		#   true - there should be no false entries left in the dictionaries.		#		#   In the case where we have just one matching seat opponent and the		#   scores do not match, then we show the user the error correction form.		#		#   If there is more than one oppenent seat game, and none of them match,		#   Then lset the user correct the one that looks closest and submit		#   Re-checking. After re-chcking, if a match is made, change to the		#   'Accept this game' dialog and continue once the user 'Accepts'.		#		############################################################		# control variables for correction panel mgmt		self.topPNameValue      = tk.StringVar()		self.topPSeatValue      = tk.IntVar()		self.topPCutCardValue   = tk.StringVar()		self.topPGameValue      = tk.IntVar()		self.topPPointsValue    = tk.IntVar()		self.topPPlusValue      = tk.IntVar()		self.topPMinusValue     = tk.IntVar()		self.topPOppSeatValue   = tk.IntVar()		self.topONameValue      = tk.StringVar()		self.topOSeatValue      = tk.IntVar()		self.topOCutCardValue   = tk.StringVar()		self.topOGameValue      = tk.IntVar()		self.topOPointsValue    = tk.IntVar()		self.topOPlusValue      = tk.IntVar()		self.topOMinusValue     = tk.IntVar()		self.topOOppSeatValue   = tk.IntVar()		self.midONameValue      = tk.StringVar()		self.midOSeatValue      = tk.IntVar()		self.midOCutCardValue   = tk.StringVar()		self.midOGameValue      = tk.IntVar()		self.midOPointsValue    = tk.IntVar()		self.midOPlusValue      = tk.IntVar()		self.midOMinusValue     = tk.IntVar()		self.midOOppSeatValue   = tk.IntVar()		self.botONameValue      = tk.StringVar()		self.botOSeatValue      = tk.IntVar()		self.botOCutCardValue   = tk.StringVar()		self.botOGameValue      = tk.IntVar()		self.botOPointsValue    = tk.IntVar()		self.botOPlusValue      = tk.IntVar()		self.botOMinusValue     = tk.IntVar()		self.botOOppSeatValue   = tk.IntVar()		# other control variables		self.errorDetailLevel   = tk.IntVar()		self.showDetails = False		# other instance variables		self.pMemScoreCard  = ''    # player scorecard being validated		self.oMemScoreCard  = ''    # opponent scorecard validating against		self.pMemGame       = ''    # player game being validated		self.oMemGame       = ''    # opponent game stepping variable		self.oMemGame0      = ''    # first opponent game being validated against		self.oMemGame1      = ''    # second opponent game being validated against		self.oMemGame2      = ''    # third opponent game being validated againse		# dictionaries used to track validaton		# format per games is {gameNo:True;False}		# gameNo 0 is True when all games have been validated		# we do this initialization at __init__ time because there		# can be multiple re-entries into the validation code via		# user interacion and even tab switching		# When games and scorecards are validated, the corresponding		# dict entry will be set True.		self.validScoreCards={}     # will be an entry for each player in tourney		# format is {playerId:{games}		self.validGames = {}        # will have an entry for each game in		# each player's score card		# need array of errors for multiple errors in multiple games		self.errorArray = {}		# just need the player side. Opponents will be scanned for each player		for pid in cfg.tourneyScoreCards:			pMemScoreCard = cfg.tourneyScoreCards[pid]			self.validGames = {}			self.validGames[0] = False  # roll-up all games per score card			for gid in pMemScoreCard.games:				self.validGames[gid] = False			# put all games dict into score card for playerId			self.validScoreCards[pid] = self.validGames		# set up all the panels that will be used		self.validationPanels()	#************************************************************	#   Build validation screen panels	#	def validationPanels(self):		self.instructionLabelA = ttk.Label(self,		                                   text='Enter correcting information,')		self.instructionLabelB = ttk.Label(self,		                                   text='then press the "Check" button',)		self.instructionLabelA.grid(row=0, column=0, sticky='w')		self.instructionLabelB.grid(row=1, column=0, sticky='w')		self.detailsButton = ttk.Radiobutton(self,		                                     text='Full Details',		                                     value=1,		                                     variable=self.errorDetailLevel,		                                     command=self.detailLevel)		self.errorsButton = ttk.Radiobutton(self,		                                    text='Just Errors',		                                    value=2,		                                    variable=self.errorDetailLevel,		                                    command=self.detailLevel)		self.detailsButton.grid(row=0, column=2, sticky='w')		self.errorsButton.grid(row=1, column=2, sticky='w')		###########################################		# Hide these for now as we never use thm		self.hideWidget(self.errorsButton)		self.hideWidget(self.detailsButton)		###########################################		self.acceptHeader = ttk.Label(self,		                              text='Accept the game that matches')		self.acceptHeader.grid(row=1, column=3,		                       sticky='w')		self.hideWidget(self.acceptHeader)		self.errorHeader = ttk.Label(self,		                             text="Games that don't balance")		self.errorHeader.grid(row=1, column=3,		                      sticky='w')		self.redText(self.errorHeader)		self.hideWidget(self.errorHeader)		#==================================================		# top panel row		self.topLeftPanel = ttk.LabelFrame(self,		                                   text='Player',		                                   relief='sunken',		                                   height='3c',		                                   width ='5c',		                                   padding='10p'		                                   )		self.topLeftPanel.grid(row=2, column=0, sticky='nsew')		self.topMidPanel = ttk.Frame(self,		                             height='3c',		                             width ='5c'		                             )		self.topMidPanel.grid(row=2, column=1, sticky='ew')		self.topRightPanel = ttk.LabelFrame(self,		                                    text='Opponent',		                                    relief='sunken',		                                    height='3c',		                                    width ='5c',		                                    padding='10p'		                                    )		self.topRightPanel.grid(row=2, column=2, stick='nswe')		#==================================================		# Mid panel row		# Mid right for duplicate opponents @ seniors		self.midMidPanel = ttk.Frame(self,		                             height='3c',		                             width ='5c'		                             )		self.midMidPanel.grid(row=3, column=1, sticky='ew')		self.midRightPanel = ttk.LabelFrame(self,		                                    text='Opponent',		                                    relief='sunken',		                                    height='3c',		                                    width ='5c',		                                    padding='10p'		                                    )		self.midRightPanel.grid(row=3, column=2, sticky='nswe')		#==================================================		# Bottom panel row		# Bot right for duplicate opponents @ seniors		self.botMidPanel = ttk.Frame(self,		                             height='3c',		                             width ='5c'		                             )		self.botMidPanel.grid(row=4, column=1, sticky='ew')		self.botRightPanel = ttk.LabelFrame(self,		                                    text='Opponent',		                                    relief='sunken',		                                    height='3c',		                                    width ='5c',		                                    padding='10p'		                                    )		self.botRightPanel.grid(row=4, column=2, sticky='nswe')		self.successLabel = ttk.Label(self,		                              text='All Games Validated')		self.successLabel.grid(row=5, column=1, sticky='ew')		self.nextTabLabel = ttk.Label(self,		                              text='Select Reports or Finish Tab')		self.nextTabLabel.grid(row=5, column=2, sticky='ew')		#==================================================		# set up top error messages		self.topPtsErr = ttk.Label(self.topMidPanel,		                           text='Points Err')		self.topPtsErr.grid(row=0, column=0, sticky='ew')		self.topPlusErr = ttk.Label(self.topMidPanel,		                            text='Plus/Mimus Err')		self.topPlusErr.grid(row=1, column=0, sticky='ew')		self.topCutErr = ttk.Label(self.topMidPanel,		                           text='Cut Card Err')		self.topCutErr.grid(row=2, column=0, sticky='ew')		self.topValidate = ttk.Button(self.topMidPanel,		                              text='Check',		                              command=self.topCheck)		self.topValidate.grid(row=4, column=0, sticky='ew')		#==================================================		# set up top ok messages		self.topGameOk = ttk.Label(self.topMidPanel,		                           text='Game Ok')		self.topGameOk.grid(row=2, column=0, sticky='e')		self.topAccept = ttk.Button(self.topMidPanel,		                            text='Accept',		                            command=self.topAcceptCmd)		self.topAccept.grid(row=3, column=0, sticky='e')		#==================================================		# set up mid error messages		self.midPtsErr = ttk.Label(self.midMidPanel,		                           text='Points Err')		self.midPtsErr.grid(row=0, column=0, sticky='ew')		self.midPlusErr = ttk.Label(self.midMidPanel,		                            text='Plus/Mimus Err')		self.midPlusErr.grid(row=1, column=0, sticky='ew')		self.midCutErr = ttk.Label(self.midMidPanel,		                           text='Cut Card Err')		self.midCutErr.grid(row=2, column=0, sticky='ew')		self.midValidate = ttk.Button(self.midMidPanel,		                              text='Check',		                              command=self.midCheck)		self.midValidate.grid(row=4, column=0, sticky='ew')		#==================================================		# set up mid ok messages		self.midGameOk = ttk.Label(self.midMidPanel,		                           text='Game Ok')		self.midGameOk.grid(row=2, column=0, sticky='e')		self.midAccept = ttk.Button(self.midMidPanel,		                            text='Accept',		                            command=self.midAcceptCmd)		self.midAccept.grid(row=3, column=0, sticky='e')		#==================================================		# set up bot error messages		self.botPtsErr = ttk.Label(self.botMidPanel,		                           text='Points Err')		self.botPtsErr.grid(row=0, column=0, sticky='ew')		self.botPlusErr = ttk.Label(self.botMidPanel,		                            text='Plus/Mimus Err')		self.botPlusErr.grid(row=1, column=0, sticky='ew')		self.botCutErr = ttk.Label(self.botMidPanel,		                           text='Cut Card Err')		self.botCutErr.grid(row=2, column=0, sticky='ew')		self.botValidate = ttk.Button(self.botMidPanel,		                              text='Check',		                              command=self.botCheck)		self.botValidate.grid(row=4, column=0, sticky='ew')		#==================================================		# bot ok messages		self.botGameOk = ttk.Label(self.botMidPanel,		                           text='Game ok')		self.botGameOk.grid(row=2, column=0, sticky='e')		self.botAccept = ttk.Button(self.botMidPanel,		                            text='Accept',		                            command=self.botAcceptCmd)		self.botAccept.grid(row=3, column=0, sticky='e')		#==================================================		# hide all panels until they are needed		self.hideAllPanels()		self.hideAllErrMsgs()		self.hideAllOkMsgs()		# and hide success widgets		self.hideWidget(self.successLabel)		self.hideWidget(self.nextTabLabel)		#==================================================		# top player panel fields		self.topPlayerLabel = ttk.Label(self.topLeftPanel,		                                text='Player  ')		self.topPlayerLabel.grid(row=0, column=0,		                         sticky='w')		self.topPlayerName = ttk.Label(self.topLeftPanel,		                               textvariable=self.topPNameValue)		self.topPlayerName.grid(row=0, column=1, sticky='w')		self.topPlayerSeatLabel = ttk.Label(self.topLeftPanel,		                                    text='Seat Number')		self.topPlayerSeatLabel.grid(row=0, column=3,		                             columnspan=2, sticky='e')		self.topPlayerSeat = ttk.Label(self.topLeftPanel,		                               textvariable=self.topPSeatValue)		self.topPlayerSeat.grid(row=0, column=5,		                        sticky='e')		#==================================================		# top player field headings		self.underlineFont10 = font.Font(underline=1, size=10)		self.topPCutCardLabel = ttk.Label(self.topLeftPanel,		                                  text='Cut Card',		                                  font=self.underlineFont10)		self.topPGameLabel = ttk.Label(self.topLeftPanel,		                               text='Game',		                               font=self.underlineFont10)		self.topPPointsLabel = ttk.Label(self.topLeftPanel,		                                 text='Points',		                                 font=self.underlineFont10)		self.topPPlusLabel = ttk.Label(self.topLeftPanel,		                               text='Plus',		                               font=self.underlineFont10)		self.topPMinusLabel = ttk.Label(self.topLeftPanel,		                                text='Minus',		                                font=self.underlineFont10)		self.topPOppSeatLabel = ttk.Label(self.topLeftPanel,		                                  text='Opp Seat No.',		                                  font=self.underlineFont10)		self.topPCutCardLabel.grid(row=1, column=0)		self.topPGameLabel.grid(row=1, column=1)		self.topPPointsLabel.grid(row=1, column=2)		self.topPPlusLabel.grid(row=1, column=3)		self.topPMinusLabel.grid(row=1, column=4)		self.topPOppSeatLabel.grid(row=1, column=5)		#==================================================		# top player entry fields		self.topPCutCard = ttk.Entry(self.topLeftPanel, width=5,		                             text=self.topPCutCardValue)		self.topPGame = ttk.Label(self.topLeftPanel, width=5,		                          textvariable=self.topPGameValue)		self.topPPoints = ttk.Entry(self.topLeftPanel, width=5,		                            text=self.topPPointsValue)		self.topPPlus = ttk.Entry(self.topLeftPanel, width=5,		                          text=self.topPPlusValue)		self.topPMinus = ttk.Entry(self.topLeftPanel, width=5,		                           text=self.topPMinusValue)		self.topPOppSeat = ttk.Entry(self.topLeftPanel, width=5,		                             text=self.topPOppSeatValue)		self.topPCutCard.grid(row=2, column=0)		self.topPGame.grid(row=2, column=1)		self.topPPoints.grid(row=2, column=2)		self.topPPlus.grid(row=2, column=3)		self.topPMinus.grid(row=2, column=4)		self.topPOppSeat.grid(row=2, column=5)		#==================================================		# top opponent panel fields		self.topOppLabel = ttk.Label(self.topRightPanel,		                             text='Opponent  ')		self.topOppLabel.grid(row=0, column=0, sticky='w')		self.topOppName = ttk.Label(self.topRightPanel,		                            textvariable=self.topONameValue)		self.topOppName.grid(row=0, column=1,		                     sticky='w')		self.topOppSeatLabel = ttk.Label(self.topRightPanel,		                                 text='Seat Number')		self.topOppSeatLabel.grid(row=0, column=3,		                          columnspan=2,		                          sticky='e')		self.topOppSeat = ttk.Label(self.topRightPanel,		                            textvariable=self.topOSeatValue)		self.topOppSeat.grid(row=0, column=5,		                     sticky='e')		#==================================================		# top opponent field headings		self.topOCutCardLabel = ttk.Label(self.topRightPanel,		                                  text='Cut Card',		                                  font=self.underlineFont10)		self.topOGameLabel = ttk.Label(self.topRightPanel,		                               text='Game',		                               font=self.underlineFont10)		self.topOPointLabel = ttk.Label(self.topRightPanel,		                                text='Points',		                                font=self.underlineFont10)		self.topOPlusLabel = ttk.Label(self.topRightPanel,		                               text='Plus',		                               font=self.underlineFont10)		self.topOMinusLabel = ttk.Label(self.topRightPanel,		                                text='Minus',		                                font=self.underlineFont10)		self.topOOppSeatLabel = ttk.Label(self.topRightPanel,		                                  text='Opp Seat No.',		                                  font=self.underlineFont10)		self.topOCutCardLabel.grid(row=1, column=0)		self.topOGameLabel.grid(row=1, column=1)		self.topOPointLabel.grid(row=1, column=2)		self.topOPlusLabel.grid(row=1, column=3)		self.topOMinusLabel.grid(row=1, column=4)		self.topOOppSeatLabel.grid(row=1, column=5)		#==================================================		# top opponent entry fields		self.topOCutCard = ttk.Entry(self.topRightPanel, width=5,		                             text=self.topOCutCardValue)		self.topOGame = ttk.Label(self.topRightPanel, width=5,		                          textvariable=self.topOGameValue)		self.topOPoints = ttk.Entry(self.topRightPanel, width=5,		                            text=self.topOPointsValue)		self.topOPlus = ttk.Entry(self.topRightPanel, width=5,		                          text=self.topOPlusValue)		self.topOMinus = ttk.Entry(self.topRightPanel, width=5,		                           text=self.topOMinusValue)		self.topOOppSeat = ttk.Entry(self.topRightPanel, width=5,		                             text=self.topOOppSeatValue)		self.topOCutCard.grid(row=2, column=0)		self.topOGame.grid(row=2, column=1)		self.topOPoints.grid(row=2, column=2)		self.topOPlus.grid(row=2, column=3)		self.topOMinus.grid(row=2, column=4)		self.topOOppSeat.grid(row=2, column=5)		#==================================================		# mid opponent panel fields		self.midOppLabel = ttk.Label(self.midRightPanel,		                             text='Opponent  ')		self.midOppLabel.grid(row=0, column=0, sticky='w')		self.midOppName = ttk.Label(self.midRightPanel,		                            textvariable=self.midONameValue)		self.midOppName.grid(row=0, column=1, sticky='w')		self.midOppSeatLabel = ttk.Label(self.midRightPanel,		                                 text='Seat Number')		self.midOppSeatLabel.grid(row=0, column=3,		                          columnspan=2, sticky='e')		self.midOppSeat = ttk.Label(self.midRightPanel,		                            textvariable=self.midOSeatValue)		self.midOppSeat.grid(row=0, column=5, sticky='e')		#==================================================		# mid opponent field headings		self.midOCutCardLabel = ttk.Label(self.midRightPanel,		                                  text='Cut Card',		                                  font=self.underlineFont10)		self.midOGameLabel = ttk.Label(self.midRightPanel,		                               text='Game',		                               font=self.underlineFont10)		self.midOPointLabel = ttk.Label(self.midRightPanel,		                                text='Points',		                                font=self.underlineFont10)		self.midOPlusLabel = ttk.Label(self.midRightPanel,		                               text='Plus',		                               font=self.underlineFont10)		self.midOMinusLabel = ttk.Label(self.midRightPanel,		                                text='Minus',		                                font=self.underlineFont10)		self.midOOppSeatLabel = ttk.Label(self.midRightPanel,		                                  text='Opp Seat No.',		                                  font=self.underlineFont10)		self.midOCutCardLabel.grid(row=1, column=0)		self.midOGameLabel.grid(row=1, column=1)		self.midOPointLabel.grid(row=1, column=2)		self.midOPlusLabel.grid(row=1, column=3)		self.midOMinusLabel.grid(row=1, column=4)		self.midOOppSeatLabel.grid(row=1, column=5)		#==================================================		# mid opponent entry fields		self.midOCutCard = ttk.Entry(self.midRightPanel, width=5,		                             text=self.midOCutCardValue)		self.midOGame = ttk.Label(self.midRightPanel, width=5,		                          textvariable=self.midOGameValue)		self.midOPoints = ttk.Entry(self.midRightPanel, width=5,		                            text=self.midOPointsValue)		self.midOPlus = ttk.Entry(self.midRightPanel, width=5,		                          text=self.midOPlusValue)		self.midOMinus = ttk.Entry(self.midRightPanel, width=5,		                           text=self.midOMinusValue)		self.midOOppSeat = ttk.Entry(self.midRightPanel, width=5,		                             text=self.midOOppSeatValue)		self.midOCutCard.grid(row=2, column=0)		self.midOGame.grid(row=2, column=1)		self.midOPoints.grid(row=2, column=2)		self.midOPlus.grid(row=2, column=3)		self.midOMinus.grid(row=2, column=4)		self.midOOppSeat.grid(row=2, column=5)		#==================================================		# bot opponent panel fields		self.botOppLabel = ttk.Label(self.botRightPanel,		                             text='Opponent  ')		self.botOppLabel.grid(row=0, column=0, sticky='w')		self.botOppName = ttk.Label(self.botRightPanel,		                            textvariable=self.botONameValue)		self.botOppName.grid(row=0, column=1, sticky='w')		self.botOppSeatLabel = ttk.Label(self.botRightPanel,		                                 text='Seat Number')		self.botOppSeatLabel.grid(row=0, column=3,		                          columnspan=2, sticky='e')		self.botOppSeat = ttk.Label(self.botRightPanel,		                            textvariable=self.botOSeatValue)		self.botOppSeat.grid(row=0, column=5, sticky='e')		#==================================================		# bot opponent field headings		self.botOCutCardLabel = ttk.Label(self.botRightPanel,		                                  text='Cut Card',		                                  font=self.underlineFont10)		self.botOGameLabel = ttk.Label(self.botRightPanel,		                               text='Game',		                               font=self.underlineFont10)		self.botOPointLabel = ttk.Label(self.botRightPanel,		                                text='Points',		                                font=self.underlineFont10		                                )		self.botOPlusLabel = ttk.Label(self.botRightPanel,		                               text='Plus',		                               font=self.underlineFont10)		self.botOMinusLabel = ttk.Label(self.botRightPanel,		                                text='Minus',		                                font=self.underlineFont10)		self.botOOppSeatLabel = ttk.Label(self.botRightPanel,		                                  text='Opp Seat No.',		                                  font=self.underlineFont10)		self.botOCutCardLabel.grid(row=1, column=0)		self.botOGameLabel.grid(row=1, column=1)		self.botOPointLabel.grid(row=1, column=2)		self.botOPlusLabel.grid(row=1, column=3)		self.botOMinusLabel.grid(row=1, column=4)		self.botOOppSeatLabel.grid(row=1, column=5)		#==================================================		# bot opponent entry fields		self.botOCutCard = ttk.Entry(self.botRightPanel, width=5,		                             text=self.botOCutCardValue)		self.botOGame = ttk.Label(self.botRightPanel, width=5,		                          textvariable=self.botOGameValue)		self.botOPoints = ttk.Entry(self.botRightPanel, width=5,		                            text=self.botOPointsValue)		self.botOPlus = ttk.Entry(self.botRightPanel, width=5,		                          text=self.botOPlusValue)		self.botOMinus = ttk.Entry(self.botRightPanel, width=5,		                           text=self.botOMinusValue)		self.botOOppSeat = ttk.Entry(self.botRightPanel, width=5,		                             text=self.botOOppSeatValue)		self.botOCutCard.grid(row=2, column=0)		self.botOGame.grid(row=2, column=1)		self.botOPoints.grid(row=2, column=2)		self.botOPlus.grid(row=2, column=3)		self.botOMinus.grid(row=2, column=4)		self.botOOppSeat.grid(row=2, column=5)		# set detail level to Error as default		self.errorDetailLevel.set(2)	#************************************************************	#   check to see if our tab was selected.	#	def tabChange(self,event):		# populate the tab whenever we get selected		print ('Seating tab event captured')		print('**ValidationTab got the notebook changed event***')		# at this point, all score cards are validated and in enteredScoreCards		# they should be moved to tourneyScoreCards for the validation module		self.moveScoreCards()		self.initValidationArray()		self.validateScoreCards()	#************************************************************	#   move cfg.enteredScoreCards to tourneyScoreCards	#	def moveScoreCards(self):		for g in cfg.enteredScoreCards:			cfg.tourneyScoreCards[g] = cfg.enteredScoreCards[g]	#************************************************************	#   first time through tab, init validation arrays	#	def initValidationArray(self):		# pass		if len(self.validScoreCards) < 1:			# means not yet allocated			# don't do it every time tab is entered in case user tabs out and back in			self.validScoreCards[0] = False			for pid in cfg.tourneyScoreCards:				validGames={}				validGames[0] = False				for g in cfg.tourneyScoreCards[pid].games:					validGames[g] = False				self.validScoreCards[pid] = validGames	#************************************************************	#   validate in-memory score cards against each other	#   these are held in in-memory dictionaries that are	#   populated by the scoring tab	#	def validateScoreCards(self):		# validation tracking dicts set up by __init__		# key 0 is special, used to AND all others below		# checkGames will set validation tracking dicts to True		# we check this before we peform checking as checkGames		# will update the validation dict then just return to		# the screen and await the user to click on correct or continue,		# depending on the outcome.		# Validation is complete when we get all the way through the		# validation dicts.		# This means we will have to init the validation dicts outside		# of this validateScoreCards routine which we will re-enter after		# every user screen interaction.		# Validation Logic:		#   Determine if there are any more score cards to be checked		#   Determine if there are any more games to check for the current player's score card		#   For each game, determine if it has been validated already		#   For each unvalidated player game, determine how many candidate games there are		#   If there is just one candidate game AND it checks out AND NOT show details		#       Mark player game as validated and step		#   Else		#       Show Player game and Opponent game and correcton messages		#       On Correction button event, re-run the validation for the same player game		#   For each candidate opponent game, show opponent game panels		#   If any candidate game is an exact match, show accept message and no error messages		#   Else, show correct messages against all opponent games		if self.validScoreCards[0]: # Means all scorecard are checked out			self.validationComplete()			return		for pid in cfg.tourneyScoreCards:   # k:v pid:mscard			print('Score card k:v', pid,':',cfg.tourneyScoreCards[pid])			self.pMemScoreCard = cfg.tourneyScoreCards[pid]			self.pSeatNumber = self.pMemScoreCard.seatNumber			if not self.validScoreCards[pid][0]:    # not all games have been checked				for gid in cfg.tourneyScoreCards[pid].games: # k:v gameNo:mgame					if not self.validScoreCards[pid][gid]:  # this game not checked						self.pMemGame = cfg.tourneyScoreCards[pid].games[gid] # memgame						# always clear the validation screen area for each new game being checked						self.hideAllPanels()						self.populatePlayerPanel(self.pMemScoreCard, self.pMemGame)						# for each game, look up playerId from seat number						self.oPlayerId = cfg.seatsBySeat[self.pMemGame.opponentSeat]						self.oMemScoreCard = cfg.tourneyScoreCards[self.oPlayerId]						self.playCount = 0						self.oMemGame0 = ''						self.oMemGame1 = ''						self.oMemGame2 = ''						for ogid in self.oMemScoreCard.games:							# find one or more opponents with matching seat number# TODO: We need to skip any opp games that have already been validated/matched							# These are recorded in the validationArray							if (self.oMemScoreCard.games[ogid].opponentSeat == self.pSeatNumber) and \									not self.validScoreCards[self.oPlayerId][ogid] :								# this allows for up to three games against the same player								if self.playCount == 0:									self.oMemGame0 = self.oMemScoreCard.games[ogid]									self.playCount += 1								elif self.playCount == 1:									self.oMemGame1 = self.oMemScoreCard.games[ogid]									self.playCount += 1								elif self.playCount == 2:									self.oMemGame2 = self.oMemScoreCard.games[ogid]									self.playCount += 1									break						# do the actual check of the ogames						# look at the value returned for where the match is						# matchGame is either 0,1,2 for the game that matched or						# -1 if there is no games that match						# show opponent matching cards by seat - up to 3 (0,1,2)						self.populateOpponentPanels(self.playCount, self.oMemScoreCard,						                            self.oMemGame0,						                            self.oMemGame1,						                            self.oMemGame2)						self.errorArray = {}    # make sure error arrary is empty to start games check						# matchgame will be -1 if no matched game, or 0,1,2 for which game is the match						matchGame = self.checkGames(self.playCount, self.errorArray,						                            self.pMemScoreCard, self.pMemGame,						                            self.oMemScoreCard,						                            self.oMemGame0,						                            self.oMemGame1,						                            self.oMemGame2						                            )						if matchGame < 0:							# nothing matched. Notify user and wait for an update							# user will get err msgs and a validate button to recheck games							# user should make corrections to and opponent game and press check button							self.showInstructions()						# otherwise was good matchGame index so return and await user action						return      # and wait for user to make correction and press check button						# we drop through, matchGame is index of matching game.						# Error msgs are displayed as singleGameCheck finds non-match					# end of for gid loop					# TODO! Not yet, have to wait for the user to accept the game					# self.validScoreCards[pid][0] = self.validGamesSummary(self.validScoreCards[pi			# end of for pid loop			self.validScoreCards[0] = self.validScoreCardsSummary(cfg.tourneyScoreCards)	# drop through when everything checks out	#************************************************************	#   set detail level for validation	#	#   Nobody uses this - but leave it there, just in case	def detailLevel(self):		if self.errorDetailLevel.get() == 1:			self.showDetails = True		else:			# only show errors during validation			self.showDetails = False	#************************************************************	#   This does the actual game-to-game checks	#	def checkGames (self, playCount, errorArray,	                pScoreCard, pGame,	                oScoreCard,	                oGame0, oGame1, oGame2	                ):		errorArray = {}		# this will return -1 if no games match, or 0,1,2 depending on which game matches		matchGame = -1      # start with no valid match		games = [oGame0, oGame1, oGame2]		goodGame = False		while not goodGame:			for ogid in range(playCount):				errorArray[ogid] = {}    #initialize error slot				# singleGameCheck returns True if game is a match				goodGame = self.singleGameCheck(errorArray[ogid],				                                 pScoreCard, pGame,				                                 oScoreCard, games[ogid])				if goodGame:					matchGame = ogid    # 0-2					self.showAcceptMsgs(ogid)					return matchGame				else:					# singleGameCheck will have initialized the correspnding errorArry slot					self.showErrorMsgs(ogid,errorArray[ogid])		return matchGame  # this will -1 for no good matches found	#************************************************************	#   just the one game to check - simplified logic	#	def singleGameCheck(self, errorSlot,	                    pScoreCard, pGame,	                    oScoreCard, oGame):		# if game is a match, returns True		ptsError = True		spreadError = True		if ((pGame.gamePoints > 0 and oGame.gamePoints == 0 ) or				(pGame.gamePoints == 0 and oGame.gamePoints > 0)):			ptsError = False		if (pGame.spreadPoints > 30 and pGame.gamePoints != 3):			ptsError = True		if ( pGame.spreadPoints + oGame.spreadPoints) == 0:			spreadError = False		errorSlot['ptsError'] = ptsError		errorSlot['spreadError'] = spreadError		# errorSlot = {'ptsError':ptsError,'spreadError':spreadError}		#returns True if no errors found for the single game		return not (ptsError or spreadError)	#************************************************************	#   roll up all games validated for a score card	#	def validGamesSummary(self, validScoreCard):		result = True		for gid in range(1,len(validScoreCard.games)):			result = result and validScoreCard.games[gid]		return result	#************************************************************	#   roll up all validated score cards	#	def validScoreCardsSummary(self, tourneyScoreCards):		result = True		for pid in range(1, len(tourneyScoreCards)):			result = result and self.validScoreCards[0]		return result	#************************************************************	#   check top panel corrections	#	def topCheck(self):		print('Top check')		self.hideInstructions()		self.hideAllErrMsgs()		self.validateScoreCards()    # revalidate after corrections	#************************************************************	#   check mid panel corrections	#	def midCheck(self):		print('Middle check')		self.hideInstructions()		self.hidAllErrMsgs()		self.validateScoreCards()    # revalidate after corrections	#************************************************************	#   check bottom panel corrections	#	def botCheck(self):		print('Bottom check')		self.hideInstructions()		self.hideAllErrMsgs()		self.validateScoreCards()    # revalidate after corrections	#************************************************************	#   top panel ok when details shown	#	def topAcceptCmd(self):		print('Top ok')		# the player game is now accepted as matched - and so is the opponent game		self.acceptGamesFor(0)       # top opponent game must be 0		self.validateScoreCards()   # just re-run the validation after user has accepted a game	#************************************************************	#   mid panel ok when details shown	def midAcceptCmd(self):		print('Mid ok')		# the player game is now accepted as matched - and so is the opponent game		self.acceptGamesFor(1)      # mid opponent game must be 1		self.validateScoreCards()   # just re-run the validation after user has accepted a game	#************************************************************	#   bot panel ok when details shown	def botAcceptCmd(self):		print('Bot ok')		# the player game is now accepted as matched - and so is the opponent game		self.acceptGamesFor(2)      # bot opponent game must be 2		self.validateScoreCards()   # just re-run the validation after user has accepted a game	#************************************************************	#   validScoreCard[0] is true - meaning all checked out	def validationComplete(self):		# show success message		# TODO: update the database		self.hideLeftPanels()		self.hideRightPanels()		self.updateDataBaseWithTourneyResults()		self.showWidget(self.successLabel)		self.showWidget(self.nextTabLabel)	#************************************************************	#   set continue for just details	def setOkContinue(self):		self.topGameOk.grid()		self.topContinue.grid()	#************************************************************	#   populate top left player panel	#	def populatePlayerPanel(self, pScoreCard, pGame):		self.setTopLeftPGame(pScoreCard, pGame)	#************************************************************	#   populate up to three opponent panels	#	def populateOpponentPanels(self, pCount, oScoreCard,	                           oGame0, oGame1, oGame2):		if pCount == 1:			self.setTopRightOGame(oScoreCard, oGame0)			self.showTopMidPanel()		elif pCount == 2:			self.setTopRightOGame(oScoreCard, oGame0)			self.setMidRightOGame(oScoreCard, oGame1)			self.showTopMidPanel()			self.showMidMidPanel()		elif pCount == 3:			self.setTopRightOGame(oScoreCard, oGame0)			self.setMidRightOGame(oScoreCard, oGame1)			self.setBotRightOGame(oScoreCard, oGame2)			self.showAllMidPanels()	#************************************************************	#   set top left panel game	#	def setTopLeftPGame(self, pScoreCard, pGame):		print('Top left game')		# light up the panel, fill in the control variables		self.showWidget(self.topLeftPanel)		# build game  panel entry		self.topPNameValue.set(cfg.s_p_id_names[pScoreCard.playerId])		self.topPSeatValue.set(pScoreCard.seatNumber)		self.topPCutCardValue.set(pGame.cutCard)		self.topPGameValue.set(pGame.gameNumber)		self.topPPointsValue.set(pGame.gamePoints)		if pGame.spreadPoints > 0:			self.topPPlusValue.set(pGame.spreadPoints)			self.topPMinusValue.set(0)		else:			self.topPPlusValue.set(0)			self.topPMinusValue.set(-pGame.spreadPoints)		self.topPOppSeatValue.set(pGame.opponentSeat)	#************************************************************	#   set top right panel game	def setTopRightOGame(self, oScoreCard, oGame):		print('Top right game')		# light up the panel, fill in the control variables		self.showWidget(self.topRightPanel)		# build game  panel entry		self.topONameValue.set(cfg.s_p_id_names[oScoreCard.playerId])		self.topOSeatValue.set(oScoreCard.seatNumber)		self.topOCutCardValue.set(oGame.cutCard)		self.topOGameValue.set(oGame.gameNumber)		self.topOPointsValue.set(oGame.gamePoints)		if oGame.spreadPoints > 0:			self.topOPlusValue.set(oGame.spreadPoints)			self.topOMinusValue.set(0)		else:			self.topOPlusValue.set(0)			self.topOMinusValue.set(-oGame.spreadPoints)		self.topOOppSeatValue.set(oGame.opponentSeat)	#************************************************************	#   set mid right panel game	def setMidRightOGame(self, oScoreCard, oGame):		print('Mid right game')		# light up the panel, fill in the control variables		self.showWidget(self.midRightPanel)		# build game  panel entry		self.midONameValue.set(cfg.s_p_id_names[oScoreCard.playerId])		self.midOSeatValue.set(oScoreCard.seatNumber)		self.midOCutCardValue.set(oGame.cutCard)		self.midOGameValue.set(oGame.gameNumber)		self.midOPointsValue.set(oGame.gamePoints)		if oGame.spreadPoints > 0:			self.midOPlusValue.set(oGame.spreadPoints)			self.midOMinusValue.set(0)		else:			self.midOPlusValue.set(0)			self.midOMinusValue.set(-oGame.spreadPoints)		self.midOOppSeatValue.set(oGame.opponentSeat)	#************************************************************	#   set bot right panel game	def setBotRightOGame(self, oScoreCard, oGame):		print('Bot right game')		# light up the panel, fill in the control variables		self.showWidget(self.botRightPanel)		# build game  panel entry		self.botONameValue.set(cfg.s_p_id_names[oScoreCard.playerId])		self.botOSeatValue.set(oScoreCard.seatNumber)		self.botOCutCardValue.set(oGame.cutCard)		self.botOGameValue.set(oGame.gameNumber)		self.botOPointsValue.set(oGame.gamePoints)		if oGame.spreadPoints > 0:			self.botOPlusValue.set(oGame.spreadPoints)			self.botOMinusValue.set(0)		else:			self.botOPlusValue.set(0)			self.botOMinusValue.set(-oGame.spreadPoints)		self.botOOppSeatValue.set(oGame.opponentSeat)	#************************************************************	#	def showSingleGameDetails(self, errorArray,	                          pMemScoreCard, MemGame,	                          oMemScoreCard, oMemGame0):		print('Show single game details - with accept')		# TODO This needs to be fixed for new game display logic		# setTopLeftGame(pMemScoreCard, pMemGame)		# set up for accept	#************************************************************	#	# def showSingleGameErrors(self, errorArray,	#                          pMemscoreCard, MemGame,	#                          oMemScoreCard, oMemGame):	# 	print('Show single errors')	# 	# setTopLeftGame(pMemScoreCard, pMemGame) This should alrady be displayed	# 	self.showTopErrMsgs()	#==================================================	# hide things until they are needed	def hideAllPanels(self):		self.hideLeftPanels()		self.hideMidPanels()		self.hideRightPanels()	def hideAllErrMsgs(self):		self.hideTopErrMsgs()		self.hideMidErrMsgs()		self.hideBotErrMsgs()	def hideAllOkMsgs(self):		self.hideTopOkMsgs()		self.hideMidOkMsgs()		self.hideBotOkMsgs()	def hideLeftPanels(self):		self.hideWidget(self.topLeftPanel)	def hideMidPanels(self):		self.hideWidget(self.topMidPanel)		self.hideWidget(self.midMidPanel)		self.hideWidget(self.botMidPanel)	def hideRightPanels(self):		self.hideWidget(self.topRightPanel)		self.hideWidget(self.midRightPanel)		self.hideWidget(self.botRightPanel)	def hideTopErrMsgs(self):		self.hideWidget(self.topPtsErr)		self.hideWidget(self.topPlusErr)		self.hideWidget(self.topCutErr)		self.hideWidget(self.topValidate)	def hideMidErrMsgs(self):		self.hideWidget(self.midPtsErr)		self.hideWidget(self.midPlusErr)		self.hideWidget(self.midCutErr)		self.hideWidget(self.midValidate)	def hideBotErrMsgs(self):		self.hideWidget(self.botPtsErr)		self.hideWidget(self.botPlusErr)		self.hideWidget(self.botCutErr)		self.hideWidget(self.botValidate)	def hideTopOkMsgs(self):		self.hideWidget(self.topGameOk)		self.hideWidget(self.topAccept)	def hideMidOkMsgs(self):		self.hideWidget(self.midGameOk)		self.hideWidget(self.midAccept)	def hideBotOkMsgs(self):		self.hideWidget(self.botGameOk)		self.hideWidget(self.botAccept)	def hideInstructions(self):		self.hideWidget(self.instructionLabelA)		self.hideWidget(self.instructionLabelB)	#==================================================	# corresponding show things when they are needed	# TODO	# All error msgs will need to know which error msg to show	# so it can backlight the entry box with the errors	def showAllPanels(self):		self.showLeftPanels()		self.showMidPanels()		self.showRightPanels()	def showAllErrMsgs(self):		self.showTopErrMsgs()		self.showMidErrMsgs()		self.showBotErrMsgs()	def showAllOkMsgs(self):		self.showTopOkMsgs()		self.showMidOkMsgs()		self.showBotOkMsgs()	def showLeftPanels(self):		self.showWidget(self.topLeftPanel)	def showAllMidPanels(self):		self.showTopMidPanel()		self.showMidMidPanel()		self.showBotMidPanel()	def showTopMidPanel(self):		self.showWidget(self.topMidPanel)	def showMidMidPanel(self):		self.showWidget(self.midMidPanel)	def showBotMidPanel(self):		self.showWidget(self.botMidPanel)	def showRightPanels(self):		self.showWidget(topRightPanel)		self.showWidget(midRightPanel)		self.showWidget(botRightPanel)	def showTopErrMsgs(self,errorSlot):		if errorSlot['ptsError']:			self.showWidget(self.topPtsErr)		if errorSlot['spreadError']:			self.showWidget(self.topPlusErr)		# self.showWidget(self.topCutErr)		self.showWidget(self.topValidate)	def showMidErrMsgs(self,errorSlot):		if errorSlot['ptsError']:			self.showWidget(self.midPtsErr)		if errorSlot['spreadError']:			self.showWidget(self.midPlusErr)		# self.showWidget(self.midCutErr)		self.showWidget(self.midValidate)	# def showTopAndMidErrMsgs(self,errorSlot):	# 	self.showTopErrMsgs()	# 	self.showMidErrMsgs()	def showBotErrMsgs(self,errorSlot):		if errorSlot['ptsError']:			self.showWidget(self.botPtsErr)		if errorSlot['spreadError']:			self.showWidget(self.botPlusErr)		# self.showWidget(self.botCutErr)		self.showWidget(self.botValidate)	def showTopOkMsgs(self):		self.showWidget(self.topGameOk)		self.showWidget(self.topAccept)	def showMidOkMsgs(self):		self.showWidget(self.midGameOk)		self.showWidget(self.midAccept)	def showBotOkMsgs(self):		self.showWidget(self.botGameOk)		self.showWidget(self.botAccept)	def showInstructions(self):		self.showWidget(self.instructionLabelA)		self.showWidget(self.instructionLabelB)	#************************************************************	#	def hideWidget(self, w):		w.grid_remove()	#************************************************************	#	def showWidget(self,w):		w.grid()	#************************************************************	#	def redText(self,w):		w.config(foreground='red')	#************************************************************	#	def blackText(self,w):		w.config(foreground='black')	#************************************************************	#	def yellowBg(self,w):		w.config(background='#FFFF99')	#************************************************************	#	def whiteBg(self,w):		w.config(background='#FFFFFF')	#************************************************************	#	#	#************************************************************	#   IMPORTANT: All switchers should go at the very end as th	#   dictionary values, rather than referencing functions, would	#   just allocate a self variable.	#   Given the functions have been defined ahead of the	#   switcher, the name of the function causes the function	#   object to become the value in the dictionary so we can	#   execute the function by name from the dictionary	#	# def showMultiGameErrors(self, playCount,	#                         pMemScoreCard, pMemGame,	#                         oMemScoreCard,	#                         oMemGame0,	#                         oMemGame1,	#                         oMemGame2	#                         ):	# 	print('Show multi game errors - nothing matched')	# 	switcher = {0:self.showTopErrMsgs,	# 	            1:self.showTopAndMidErrMsgs,	# 	            2:self.showAllErrMsgs}	# 	switcher[playCount]()	# 	# none of the games match - everyone is eligible to be checked	# 	# setTopLeftGame(pMemScoreCard, pMemGame) This should already be displayed	#	# #************************************************************	# #	# def showMultiGameAccept(self, playCount,matchGame,	#                         pMemScoreCard, pMemGame,	#                         oMemScoreCard,	#                         oMemGame0,	#                         oMemGame1,	#                         oMemGame2	#                         ):	# 	print('Show multi game accept - show no errors on other games')	# 	switcher = {0:self.showTopOkMsgs,	# 	            1:self.showMidOkMsgs,	# 	            2:self.showBotOkMsgs}	# 	switcher[matchGame]()	# 	# one of the games matched - so set up to accept that one	# 	# setTopLeftGame(pMemScoreCard, pMemGame) This should alrady be displayed	# ************************************************************	#   return opponent seat for top Opponent game	#	def getTopOSeat (self):		return self.topOSeatValue.get()	# ************************************************************	#   return opponent seat for mid Opponent game	#	def getMidOSeat (self):		return self.midOSeatValue.get()	# ************************************************************	#   return opponent seat for bot Opponent game	#	def getBotOSeat(self):		return self.botOSeatValue.get()	def getTopOGame(self):		return self.topOGameValue.get()	def getMidOGame(self):		return self.midOGameValue.get()	def getBotOGame(self):		return self.botOGameValue.get()	# ************************************************************	#	#************************************************************	#   mark player game and corresponding opponent game as checked off	def acceptGamesFor(self,opp):		# opp is oppenent number occurence on screen - range is 0-2		self.acceptPlayerGame()         # only ever one player game		self.acceptOpponentGame(opp)    # let function fetch the values it need		self.hideAllOkMsgs()            # remove Ok msgs ready for next game		self.hideAllErrMsgs()           # and any Err msgs if accepted game is not the first	#************************************************************	#   accept the player game and mark as valid	#	def acceptPlayerGame(self):		pid = cfg.seatsBySeat[self.topPSeatValue.get()]		# mark the game as validated in the validation array		self.validScoreCards[pid][self.topPGameValue.get()] = True		self.rollUpGames(pid)     # check if all games valid for this score card		# we defer all soore cards roll-up until opponent game is accepted	#************************************************************	#   accept the opponent game and mark as valid	#   if the player game matches the opponent, then the opponent	#   game must also be valid - to twofer	def acceptOpponentGame(self, opp):		switch1 = {			0:self.getTopOSeat,			1:self.getMidOSeat,			2:self.getBotOSeat		}		oSeat = switch1[opp]()		oid = cfg.seatsBySeat[oSeat]    # needed to validate opp score card games		# Note: We only have multiple games for the same opp as it depends on seat number		#       and only one opponent sits is the same seat		switch2 = {			0:self.getTopOGame,			1:self.getMidOGame,			2:self.getBotOGame		}		oGame = switch2[opp]()		self.validScoreCards[oid][oGame] = True		self.rollUpGames(oid)		self.rollUpScoreCards()      # scan to see if we're all done	def showAcceptMsgs(self, gid):		# display ok msgs for game that matched and will have its Accept button clicked		switch1 = {			0:self.showTopOkMsgs,			1:self.showMidOkMsgs,			2:self.showBotOkMsgs		}		switch1[gid]()	def showErrorMsgs(self,gid,errorSlot):		# display errors for game gid from errorArray		switch1 = {			0:self.showTopErrMsgs,			1:self.showMidErrMsgs,			2:self.showBotErrMsgs		}		switch1[gid](errorSlot)	#************************************************************	#   roll up all games for given player	#	def rollUpGames(self,player):		result = True		for g in self.validScoreCards[player]:			if g == 0:				continue			result = result and self.validScoreCards[player][g]		self.validScoreCards[player][0] = result	#************************************************************	#   foll up all score cards for all players	#	def rollUpScoreCards(self):		result = True		for p in self.validScoreCards:			if p == 0:				continue			result = result and self.validScoreCards[p][0]  # get all games setting per pid		self.validScoreCards[0] = result	#************************************************************	#   Put the tournament results into the database from the	#   in-memory score cards and memeory record.	#	def updateDataBaseWithTourneyResults(self):		# TODO: update database from memory reocrd for validated tourney		#		for pid in cfg.tourneyScoreCards:			# step thru each player's score card			# allcodate scorecards for each player			aScoreCard = ScoreCard(Tourney = cfg.tourneyScoreCards[pid].tourneyId,			                       Player = pid,			                       SeatNumber = cfg.tourneyScoreCards[pid].seatNumber			                       )			# we need to get the scoreCardId to line up the games for this score card			# have to get it from the databaee				for gid in cfg.tourneyScoreCards[pid].games:				# allcocate a game object that will be propageted to the data basse					aGame = Game()if __name__ == '__main__':	root = tk.Tk()	ValidationTab(root)    